
# This file was *autogenerated* from the file ./4_4_25.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_48p0 = RealNumber('48.0'); _sage_const_4 = Integer(4); _sage_const_48 = Integer(48); _sage_const_8 = Integer(8); _sage_const_0p1 = RealNumber('0.1'); _sage_const_0p0 = RealNumber('0.0'); _sage_const_562 = Integer(562)#!/usr/local/bin/sage

# find all roots in an interval given as [a, b]
def find_all_roots(f, a, b, tol):
  roots = []
  istack = [(a,b)]
  while istack:
    start, end = istack[-_sage_const_1 ]
    istack = istack[:-_sage_const_1 ]
    try:
      root = find_root(f, start, end)
    except RuntimeError:
      continue
    if root in roots:
      continue
    if abs(f(root)) < tol: # end condition
      roots.append(root)
    istack.append((start, root-tol))
    istack.append((root+tol, end))
  return roots

f = sqrt(_sage_const_1  + (cos(x))**_sage_const_2 )
g = f.diff().diff().diff().diff()
h = f.diff().diff().diff().diff().diff()

all_roots = find_all_roots(h, _sage_const_0 , _sage_const_48 , _sage_const_0p1 **_sage_const_8 )

print all_roots

min = _sage_const_0p0 
max = _sage_const_0p0 
for i in all_roots+[_sage_const_48p0 ]:
  if i < g(min):
    min = i
  if i > g(max):
    max = i
print min, max
print g(min).n(), g(max).n()

n = _sage_const_562 
a = _sage_const_0 
b = _sage_const_48 
h = (b - a) / n

# composite simpson's rule
# just sum of simpson's rule
res = _sage_const_0p0 
for i in xrange(_sage_const_0 , n, _sage_const_2 ):
  res += (h / _sage_const_3 ) * (f(a + i * h) + _sage_const_4  * f(a + (i + _sage_const_1 ) * h) + f(a + (i + _sage_const_2 ) * h))
print res.n()
print numerical_integral(f, _sage_const_0 , _sage_const_48 )


