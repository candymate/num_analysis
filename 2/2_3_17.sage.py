
# This file was *autogenerated* from the file ./2_3_17.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_4 = Integer(4); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_20 = Integer(20); _sage_const_18 = Integer(18); _sage_const_221 = Integer(221); _sage_const_230 = Integer(230)#!/usr/local/bin/sage

def newton_method(f, ff, v, tol, num):
  nv = v - (f(v) / ff(v))
  print "iter :", num
  print "v :", v.n()
  print "nv :", nv.n()
  print "f v :", (f(v)).n()
  print "precision :", (nv - v).n()
  if num > _sage_const_20 :
    return nv
  if abs(nv - v) < tol:
    return nv
  else:
    return newton_method(f, ff, nv.n(), tol, num+_sage_const_1 )

def secant_method(f, v1, v2, tol, num):
  nv = v2 - (f(v2)*(v2 - v1)/(f(v2) - f(v1)))
  print "iter :", num
  print "v1 :", v1.n()
  print "v2 :", v2.n()
  print "nv :", nv.n()
  print "f nv :", (f(nv)).n()
  print "precision :", (nv - v2).n()
  
  if num > _sage_const_20 :
    return nv
  if abs(nv - v2) < tol:
    return nv
  else:
    return secant_method(f, v2.n(), nv.n(), tol, num + _sage_const_1 )

def false_position(f, v1, v2, tol, num):
  nv = v2 - f(v2)*(v2 - v1)/(f(v2) - f(v1))
  print "iter :", num
  print "v1 :", v1.n()
  print "v2 :", v2.n()
  print "nv :", nv.n()
  print "f nv :", (f(nv)).n()
  print "precision :", (nv - v2).n()
  
  if num > _sage_const_20 :
    return nv
  if abs(nv - v2) < tol:
    return nv
  if f(nv)*f(v2) < _sage_const_0 :
    return false_position(f, v2.n(), nv.n(), tol, num + _sage_const_1 )
  else:
    return false_position(f, v1.n(), nv.n(), tol, num + _sage_const_1 )

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

x = var('x')

f = _sage_const_230 *x**_sage_const_4  + _sage_const_18 *x**_sage_const_3  + _sage_const_9 *x**_sage_const_2  - _sage_const_221 *x - _sage_const_9 

ff = f.diff(x)

#try:
#  f = f._fast_float_(f.variables()[0])
#  ff = ff._fast_float_(ff.variables()[0])
#except AttributeError:
#  pass

print "------------ False Position ----------------"
res = false_position(f, -_sage_const_1 , _sage_const_0 , _sage_const_10 **(-_sage_const_6 ), _sage_const_1 )
print "final f v :", (f(res)).n()
print "--------------------------------------------"
res = false_position(f, _sage_const_0 , _sage_const_1 , _sage_const_10 **(-_sage_const_6 ), _sage_const_1 )
print "final f v :", (f(res)).n()

print "------------ Secant Method -----------------"
res = secant_method(f, -_sage_const_1 , _sage_const_0 , _sage_const_10 **(-_sage_const_6 ), _sage_const_1 )
print "final f v :", (f(res)).n()
print "--------------------------------------------"
res = secant_method(f, _sage_const_0 , _sage_const_1 , _sage_const_10 **(-_sage_const_6 ), _sage_const_1 )
print "final f v :", (f(res)).n()

print "------------ Newton Method -----------------"
res = newton_method(f, ff, -_sage_const_1 /_sage_const_2 , _sage_const_10 **(-_sage_const_6 ), _sage_const_1 )
print "final f v :", (f(res)).n()
print "--------------------------------------------"
res = newton_method(f, ff, _sage_const_1 /_sage_const_2 , _sage_const_10 **(-_sage_const_6 ), _sage_const_1 )
print "final f v :", (f(res)).n()


