
# This file was *autogenerated* from the file ./2_1_5.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_10 = Integer(10); _sage_const_0p5 = RealNumber('0.5')#!/usr/local/bin/sage

def bisect_method(f, a, b, eps):
    iter = _sage_const_0 
    try:
        f = f._fast_float_(f.variables()[_sage_const_0 ])
    except AttributeError:
        pass
    intervals = [(a,b)]
    two = float(_sage_const_2 ); eps = float(eps)
    while True:
        c = (a+b)/two
        fa = f(a); fb = f(b); fc = f(c)
        print "iter :", iter
        print "interval a :", a, fa
        print "interval b :", b, fb
        print "try c :", c, fc
        print "precision :", abs(b - c)
        iter += _sage_const_1 
        if abs(b - c) < eps: return c, intervals
        if fa*fc < _sage_const_0 :
            a, b = a, c
        elif fc*fb < _sage_const_0 :
            a, b = c, b
        else:
            raise ValueError, "f must have a sign change in the interval (%s,%s)"%(a,b)
        intervals.append((a,b))

x = var('x')
#f = 3*x - e^x
#f = 2*x + 3*cos(x) - e^x
#f = x^2 - 4*x + 4 - ln(x)
f = x + _sage_const_1  - _sage_const_2 *sin(pi * x)
bisect_method(f, _sage_const_0p5 , _sage_const_1 , _sage_const_10 **(-_sage_const_5 ))

